{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PrimaryNavigator = PrimaryNavigator;\nexports.canExit = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _screens = require(\"../screens\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\Anibal Pagan Ventura\\\\Desktop\\\\UPR\\\\Ingenieria\\\\ICOM INSO\\\\mobile\\\\PaperMobile\\\\app\\\\navigation\\\\primary-navigator.tsx\";\nvar Stack = (0, _stack.createStackNavigator)();\n\nfunction PrimaryNavigator() {\n  return _react.default.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      gestureEnabled: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Stack.Screen, {\n    name: \"welcome\",\n    component: _screens.WelcomeScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(Stack.Screen, {\n    name: \"demo\",\n    component: _screens.DemoScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar exitRoutes = [\"welcome\"];\n\nvar canExit = function canExit(routeName) {\n  return exitRoutes.includes(routeName);\n};\n\nexports.canExit = canExit;","map":{"version":3,"sources":["C:/Users/Anibal Pagan Ventura/Desktop/UPR/Ingenieria/ICOM INSO/mobile/PaperMobile/app/navigation/primary-navigator.tsx"],"names":["Stack","PrimaryNavigator","headerShown","gestureEnabled","WelcomeScreen","DemoScreen","exitRoutes","canExit","routeName","includes"],"mappings":";;;;;;;;AAMA;;AACA;;AACA;;;AAoBA,IAAMA,KAAK,GAAG,kCAAd;;AAEO,SAASC,gBAAT,GAA4B;AACjC,SACE,6BAAC,KAAD,CAAO,SAAP;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE,KADA;AAEbC,MAAAA,cAAc,EAAE;AAFH,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAEC,sBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEC,mBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD;;AAWD,IAAMC,UAAU,GAAG,CAAC,SAAD,CAAnB;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SAAuBF,UAAU,CAACG,QAAX,CAAoBD,SAApB,CAAvB;AAAA,CAAhB","sourcesContent":["/**\r\n * This is the navigator you will modify to display the logged-in screens of your app.\r\n * You can use RootNavigator to also display an auth flow or other user flows.\r\n *\r\n * You'll likely spend most of your time in this file.\r\n */\r\nimport React from \"react\"\r\nimport { createStackNavigator } from \"@react-navigation/stack\"\r\nimport { WelcomeScreen, DemoScreen } from \"../screens\"\r\n\r\n/**\r\n * This type allows TypeScript to know what routes are defined in this navigator\r\n * as well as what properties (if any) they might take when navigating to them.\r\n *\r\n * If no params are allowed, pass through `undefined`. Generally speaking, we\r\n * recommend using your MobX-State-Tree store(s) to keep application state\r\n * rather than passing state through navigation params.\r\n *\r\n * For more information, see this documentation:\r\n *   https://reactnavigation.org/docs/params/\r\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\r\n */\r\nexport type PrimaryParamList = {\r\n  welcome: undefined\r\n  demo: undefined\r\n}\r\n\r\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\r\nconst Stack = createStackNavigator<PrimaryParamList>()\r\n\r\nexport function PrimaryNavigator() {\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n        gestureEnabled: true,\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"welcome\" component={WelcomeScreen} />\r\n      <Stack.Screen name=\"demo\" component={DemoScreen} />\r\n    </Stack.Navigator>\r\n  )\r\n}\r\n\r\n/**\r\n * A list of routes from which we're allowed to leave the app when\r\n * the user presses the back button on Android.\r\n *\r\n * Anything not on this list will be a standard `back` action in\r\n * react-navigation.\r\n *\r\n * `canExit` is used in ./app/app.tsx in the `useBackButtonHandler` hook.\r\n */\r\nconst exitRoutes = [\"welcome\"]\r\nexport const canExit = (routeName: string) => exitRoutes.includes(routeName)\r\n"]},"metadata":{},"sourceType":"script"}