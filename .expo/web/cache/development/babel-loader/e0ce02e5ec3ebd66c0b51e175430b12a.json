{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar rtlDetect = _interopRequireWildcard(require(\"rtl-detect\"));\n\nvar _default = {\n  get isRTL() {\n    var _rtlDetect$isRtlLang;\n\n    return (_rtlDetect$isRtlLang = rtlDetect.isRtlLang(this.locale)) != null ? _rtlDetect$isRtlLang : false;\n  },\n\n  get locale() {\n    if (!_core.Platform.isDOMAvailable) {\n      return '';\n    }\n\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n\n  get locales() {\n    if (!_core.Platform.isDOMAvailable) {\n      return [];\n    }\n\n    var _navigator = navigator,\n        _navigator$languages = _navigator.languages,\n        languages = _navigator$languages === void 0 ? [] : _navigator$languages;\n    return Array.from(languages);\n  },\n\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n\n  get isoCurrencyCodes() {\n    return [];\n  },\n\n  get region() {\n    var locale = this.locale;\n\n    if (typeof locale === 'string') {\n      var _locale$split = locale.split('-'),\n          _locale$split2 = (0, _slicedToArray2.default)(_locale$split, 2),\n          iso = _locale$split2[1];\n\n      return iso ? iso.toUpperCase() : null;\n    }\n\n    return null;\n  },\n\n  getLocalizationAsync: function getLocalizationAsync() {\n    var region, isoCurrencyCodes, timezone, locales, locale, isRTL;\n    return _regenerator.default.async(function getLocalizationAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            region = this.region, isoCurrencyCodes = this.isoCurrencyCodes, timezone = this.timezone, locales = this.locales, locale = this.locale, isRTL = this.isRTL;\n            return _context.abrupt(\"return\", {\n              region: region,\n              isoCurrencyCodes: isoCurrencyCodes,\n              timezone: timezone,\n              locales: locales,\n              locale: locale,\n              isRTL: isRTL\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../src/ExpoLocalization.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA;;AACA;;eAIe;AACb,MAAI,KAAJ,GAAS;AAAA;;AACP,mCAAO,SAAS,CAAC,SAAV,CAAoB,KAAK,MAAzB,CAAP,mCAA2C,KAA3C;AACD,GAHY;;AAIb,MAAI,MAAJ,GAAU;AACR,QAAI,CAAC,eAAS,cAAd,EAA8B;AAC5B,aAAO,EAAP;AACD;;AAED,QAAM,MAAM,GACV,SAAS,CAAC,QAAV,IACA,SAAS,CAAC,gBAAD,CADT,IAEA,SAAS,CAAC,iBAAD,CAFT,IAGA,SAAS,CAAC,cAAD,CAHT,IAIA,KAAK,OAAL,CAAa,CAAb,CALF;AAMA,WAAO,MAAP;AACD,GAhBY;;AAiBb,MAAI,OAAJ,GAAW;AACT,QAAI,CAAC,eAAS,cAAd,EAA8B;AAC5B,aAAO,EAAP;AACD;;AAHQ,qBAIkB,SAJlB;AAAA,0CAID,SAJC;AAAA,QAID,SAJC,qCAIW,EAJX;AAKT,WAAO,KAAK,CAAC,IAAN,CAAW,SAAX,CAAP;AACD,GAvBY;;AAwBb,MAAI,QAAJ,GAAY;AACV,QAAM,eAAe,GAAG,SAAxB;;AACA,QAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,eAAP;AACD;;AACD,WAAO,IAAI,CAAC,cAAL,GAAsB,eAAtB,GAAwC,QAAxC,IAAoD,eAA3D;AACD,GA9BY;;AA+Bb,MAAI,gBAAJ,GAAoB;AAElB,WAAO,EAAP;AACD,GAlCY;;AAmCb,MAAI,MAAJ,GAAU;AAAA,QACA,MADA,GACW,IADX,CACA,MADA;;AAER,QAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAAA,0BACd,MAAM,CAAC,KAAP,CAAa,GAAb,CADc;AAAA;AAAA,UACrB,GADqB;;AAE9B,aAAO,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAH,GAAuB,IAAjC;AACD;;AACD,WAAO,IAAP;AACD,GA1CY;;AA2CP,EAAA,oBA3CO;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CH,YAAA,MA5CG,GA4C4D,IA5C5D,CA4CH,MA5CG,EA4CK,gBA5CL,GA4C4D,IA5C5D,CA4CK,gBA5CL,EA4CuB,QA5CvB,GA4C4D,IA5C5D,CA4CuB,QA5CvB,EA4CiC,OA5CjC,GA4C4D,IA5C5D,CA4CiC,OA5CjC,EA4C0C,MA5C1C,GA4C4D,IA5C5D,CA4C0C,MA5C1C,EA4CkD,KA5ClD,GA4C4D,IA5C5D,CA4CkD,KA5ClD;AAAA,6CA6CJ;AACL,cAAA,MAAM,EAAN,MADK;AAEL,cAAA,gBAAgB,EAAhB,gBAFK;AAGL,cAAA,QAAQ,EAAR,QAHK;AAIL,cAAA,OAAO,EAAP,OAJK;AAKL,cAAA,MAAM,EAAN,MALK;AAML,cAAA,KAAK,EAAL;AANK,aA7CI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","sourcesContent":["/* eslint-env browser */\nimport { Platform } from '@unimodules/core';\nimport * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get locale(): string {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n  get region(): string | null {\n    const { locale } = this;\n    if (typeof locale === 'string') {\n      const [, iso] = locale.split('-');\n      return iso ? iso.toUpperCase() : null;\n    }\n    return null;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const { region, isoCurrencyCodes, timezone, locales, locale, isRTL } = this;\n    return {\n      region,\n      isoCurrencyCodes,\n      timezone,\n      locales,\n      locale,\n      isRTL,\n    };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}